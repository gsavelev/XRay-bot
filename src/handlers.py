import asyncio
import logging
import json
from datetime import datetime, timedelta
from aiogram import Dispatcher, Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import config
from database import (
    StaticProfile, get_user, create_user, get_all_users,
    create_static_profile, get_static_profiles, 
    User, Session, get_user_stats as db_user_stats,
)
from functions import (
    create_vless_profile, delete_client_by_email, generate_vless_url,
    get_user_stats, create_static_client, get_global_stats, get_online_users,
    check_if_user_chat_member, get_chat_name,
)

logger = logging.getLogger(__name__)

router = Router()

MAX_MESSAGE_LENGTH = 4096

class AdminStates(StatesGroup):
    CREATE_STATIC_PROFILE = State()
    SEND_MESSAGE = State()
    SEND_MESSAGE_TARGET = State()

def split_text(text: str, max_length: int = MAX_MESSAGE_LENGTH) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
        part = text[:max_length]
        last_newline = part.rfind('\n')
        if last_newline != -1:
            part = part[:last_newline]
        parts.append(part)
        text = text[len(part):].lstrip()
    return parts

async def show_menu(bot: Bot, chat_id: int, message_id: int = None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é (–º–æ–∂–µ—Ç –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ)"""
    user = await get_user(chat_id)
    if not user:
        return
    
    text = (
        f"**–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è**: `{user.full_name}`\n"
        f"**Id**: `{user.telegram_id}`\n"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data="connect")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    
    if user.is_admin:
        builder.button(text="‚ö†Ô∏è –ê–¥–º–∏–Ω. –º–µ–Ω—é", callback_data="admin_menu")
    
    builder.adjust(2, 2, 1)
    
    if message_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )

def update_user_data(message: Message, user: User, update_data: dict) -> None:
    """
    Update user data in the database.
    
    This function updates the specified fields of a user record in the database
    and commits the changes. It's used to keep user information synchronized
    with their current Telegram profile data.
    
    Args:
        message: The Telegram message object containing user information
        user: The User database object to update
        update_data: Dictionary containing field names as keys and new values as values.
                     Valid fields include: full_name, username, telegram_id, etc.
    
    Returns:
        None
        
    Note:
        The function logs the update operation for debugging purposes.
        Only fields that exist in the User model can be updated.
    """
    with Session() as session:
        db_user = session.query(User).get(user.id)
        for key, value in update_data.items():
            setattr(db_user, key, value)
        session.commit()
        logger.info(f"üîÑ Updated user data: {message.from_user.id}")

@router.message(Command("start"))
async def start_cmd(message: Message, bot: Bot):
    logger.info(f"‚ÑπÔ∏è Start command from {message.from_user.id}")
    is_user_chat_member = await check_if_user_chat_member(message.from_user.id, bot)

    if is_user_chat_member:
        user = await get_user(message.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        update_data = {}
        if user:
            if user.full_name != message.from_user.full_name:
                update_data["full_name"] = message.from_user.full_name
            if user.username != message.from_user.username:
                update_data["username"] = message.from_user.username
            if user.chat_member != is_user_chat_member:
                update_data["chat_member"] = is_user_chat_member
        else:
            is_admin = message.from_user.id in config.ADMINS
            user = await create_user(
                telegram_id=message.from_user.id, 
                full_name=message.from_user.full_name,
                username=message.from_user.username,
                chat_member=is_user_chat_member,
                is_admin=is_admin
            )
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç–∞ `{(await bot.get_me()).full_name}`!", parse_mode='Markdown')
            await asyncio.sleep(2)
    
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if update_data:
            update_user_data(message, user, update_data)
        
        await show_menu(bot, message.from_user.id)
    else:
        await message.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        logger.info(f"üõë Denied access to {message.from_user.id}")

@router.message(Command("menu"))
async def menu_cmd(message: Message, bot: Bot):
    user = await get_user(message.from_user.id)
    if not user:
        await start_cmd(message, bot)
        return
    
    is_user_chat_member = await check_if_user_chat_member(message.from_user.id, bot)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    update_data = {}
    if user.full_name != message.from_user.full_name:
        update_data["full_name"] = message.from_user.full_name
    if user.username != message.from_user.username:
        update_data["username"] = message.from_user.username
    if user.chat_member != is_user_chat_member:
        update_data["chat_member"] = is_user_chat_member
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if update_data:
        update_user_data(message, user, update_data)
    
    if is_user_chat_member:
        await show_menu(bot, message.from_user.id)
    else:
        await message.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        logger.info(f"üõë Denied access to {message.from_user.id}")

@router.callback_query(F.data == "help")
async def help_msg(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    chat_name = await get_chat_name(bot, config.CHAT_ID)
    text = f"–û–± –æ—à–∏–±–∫–∞—Ö –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –ø–∏—à–∏ –≤ —á–∞—Ç `{chat_name}`"
    await callback.message.answer(text, parse_mode='Markdown', reply_markup=builder.as_markup())

@router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not user or not user.is_admin:
        await callback.answer("üõë –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    total, chat_members, strangers = await db_user_stats()
    online_count = await get_online_users()
    
    text = (
        "**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        f"**–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**: `{total}`\n"
        f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ / –Ω–µ–∑–Ω–∞–∫–æ–º—Ü—ã**: `{chat_members}` / `{strangers}`\n"
        f"**–û–Ω–ª–∞–π–Ω**: `{online_count}` | **–û—Ñ–ª–∞–π–Ω**: `{total - online_count}`"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_list")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø. —Å–µ—Ç–∏", callback_data="admin_network_stats")
    builder.button(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_send_message")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(2, 1, 1, 1, 1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "admin_user_list")
async def admin_user_list(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞", callback_data="user_list_chat_members")
    builder.button(text="üõë –ß—É–∂–∞–∫–∏", callback_data="user_list_strangers")
    builder.button(text="‚è±Ô∏è –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="static_profiles_menu")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
    builder.adjust(1, 1, 1)
    await callback.message.edit_text("**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä**", reply_markup=builder.as_markup(), parse_mode='Markdown')

@router.callback_query(F.data == "user_list_chat_members")
async def handle_user_list_active(callback: CallbackQuery):
    users = await get_all_users(chat_member=True)
    if not users:
        await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞")
        return
    
    text = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞:</b>\n\n"
    for user in users:
        username = f"@{user.username}" if user.username else "none"
        user_line = f"‚Ä¢ {user.full_name} ({username} | <code>{user.telegram_id}</code>)\n"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
        if len(text) + len(user_line) > MAX_MESSAGE_LENGTH:
            await callback.message.answer(text, parse_mode="HTML")
            text = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n\n"
        
        text += user_line
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    await callback.message.answer(text, parse_mode="HTML")

@router.callback_query(F.data == "user_list_strangers")
async def handle_user_list_inactive(callback: CallbackQuery):
    users = await get_all_users(chat_member=False)
    if not users:
        await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á—É–∂–∞–∫–æ–≤")
        return
    
    text = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á—É–∂–∞–∫–∏:</b>\n\n"
    for user in users:
        username = f"@{user.username}" if user.username else "none"
        user_line = f"‚Ä¢ {user.full_name} ({username} | <code>{user.telegram_id}</code>)\n"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
        if len(text) + len(user_line) > MAX_MESSAGE_LENGTH:
            await callback.message.answer(text, parse_mode="HTML")
            text = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á—É–∂–∞–∫–∏ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n\n"
        
        text += user_line
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    await callback.message.answer(text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(F.data == "admin_send_message")
async def admin_send_message_start(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞", callback_data="target_chat_members")
    builder.button(text="üõë –ß—É–∂–∞–∫–∏", callback_data="target_strangers")
    builder.button(text="üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="target_all")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("target_"))
async def admin_send_message_target(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –°–Ω–∏–º–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    target = callback.data.split("_")[1]
    await state.update_data(target=target)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(AdminStates.SEND_MESSAGE)

@router.message(AdminStates.SEND_MESSAGE)
async def admin_send_message(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    target = data['target']
    text = message.text
    
    users = []
    if target == "chat_members":
        users = await get_all_users(chat_member=True)
    elif target == "strangers":
        users = await get_all_users(chat_member=False)
    else:  # all
        users = await get_all_users()
    
    success = 0
    failed = 0
    
    for user in users:
        try:
            await bot.send_message(user.telegram_id, text)
            success += 1
        except Exception as e:
            logger.error(f"üõë –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {user.telegram_id}: {e}")
            failed += 1
    
    await message.answer(
        f"üì® –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {len(users)}"
    )
    await state.clear()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.callback_query(F.data == "static_profiles_menu")
async def static_profiles_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üÜï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="static_profile_add")
    builder.button(text="üìã –í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="static_profile_list")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_user_list")
    builder.adjust(1)
    await callback.message.edit_text("**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ**", reply_markup=builder.as_markup(), parse_mode='Markdown')

@router.callback_query(F.data == "static_profile_add")
async def static_profile_add(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –°–Ω–∏–º–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:")
    await state.set_state(AdminStates.CREATE_STATIC_PROFILE)

@router.message(AdminStates.CREATE_STATIC_PROFILE)
async def process_static_profile_name(message: Message, state: FSMContext):
    profile_name = message.text
    profile_data = await create_static_client(profile_name)
    
    if profile_data:
        vless_url = generate_vless_url(profile_data)
        await create_static_profile(profile_name, vless_url)
        profiles = await get_static_profiles()
        for profile in profiles:
            if profile.name == profile_name:
                id = profile.id
        builder = InlineKeyboardBuilder()
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_static_{id}")
        await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n`{vless_url}`", reply_markup=builder.as_markup(), parse_mode='Markdown')
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
    
    await state.clear()

@router.callback_query(F.data == "static_profile_list")
async def static_profile_list(callback: CallbackQuery):
    profiles = await get_static_profiles()
    if not profiles:
        await callback.answer("–ù–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
        return
    
    for profile in profiles:
        builder = InlineKeyboardBuilder()
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_static_{profile.id}")
        await callback.message.answer(
            f"**{profile.name}**\n`{profile.vless_url}`", 
            reply_markup=builder.as_markup(), parse_mode='Markdown'
        )

@router.callback_query(F.data.startswith("delete_static_"))
async def handle_delete_static_profile(callback: CallbackQuery):
    try:
        profile_id = int(callback.data.split("_")[-1])
        
        with Session() as session:
            profile = session.query(StaticProfile).filter_by(id=profile_id).first()
            if not profile:
                await callback.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            success = await delete_client_by_email(profile.name)
            if not success:
                logger.error(f"üõë –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∏–Ω–±–∞—É–Ω–¥–∞: {profile.name}")
            
            session.delete(profile)
            session.commit()
        
        await callback.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω!")
        await callback.message.delete()
    except Exception as e:
        logger.error(f"üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

@router.callback_query(F.data == "connect")
async def connect_profile(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("üõë –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è")
        return
    
    if not user.chat_member:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    if not user.vless_profile_data:
        await callback.message.edit_text("‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –≤–∞—à VPN –ø—Ä–æ—Ñ–∏–ª—å...")
        profile_data = await create_vless_profile(user.telegram_id)
        
        if profile_data:
            with Session() as session:
                db_user = session.query(User).filter_by(telegram_id=user.telegram_id).first()
                if db_user:
                    db_user.vless_profile_data = json.dumps(profile_data)
                    session.commit()
            user = await get_user(user.telegram_id)
        else:
            await callback.message.answer("üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    
    profile_data = safe_json_loads(user.vless_profile_data, default={})
    if not profile_data:
        await callback.message.answer("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    vless_url = generate_vless_url(profile_data)
    text = (
        "üéâ **–í–∞—à VPN –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤!**\n\n"
        "‚ÑπÔ∏è **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:**\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n\n"
        f"`{vless_url}`\n\n"
        "3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
    )

    builder = InlineKeyboardBuilder()
    builder.button(text='üñ•Ô∏è Windows [V2RayN]', url='https://github.com/2dust/v2rayN/releases/download/7.13.8/v2rayN-windows-64-desktop.zip')
    builder.button(text='üêß Linux [NekoBox]', url='https://github.com/MatsuriDayo/nekoray/releases/download/4.0.1/nekoray-4.0.1-2024-12-12-debian-x64.deb')
    builder.button(text='üçé Mac [V2RayU]', url='https://github.com/yanue/V2rayU/releases/download/v4.2.6/V2rayU-64.dmg ')
    builder.button(text='üçè iOS [V2RayTun]', url='https://apps.apple.com/ru/app/v2raytun/id6476628951')
    builder.button(text='ü§ñ Android [V2RayNG]', url='https://github.com/2dust/v2rayNG/releases/download/1.10.16/v2rayNG_1.10.16_arm64-v8a.apk')
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(2, 2, 1, 1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode='Markdown')

@router.callback_query(F.data == "stats")
async def user_stats(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not user or not user.vless_profile_data:
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return
    await callback.message.edit_text("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    profile_data = safe_json_loads(user.vless_profile_data, default={})
    stats = await get_user_stats(profile_data["email"])

    logger.debug(stats)
    upload = f"{stats.get('upload', 0) / 1024 / 1024:.2f}"
    upload_size = 'MB' if int(float(upload)) < 1024 else 'GB'
    if upload_size == "GB":
        upload = f"{int(float(upload) / 1024):.2f}"

    download = f"{stats.get('download', 0) / 1024 / 1024:.2f}"
    download_size = 'MB' if int(float(download)) < 1024 else 'GB'
    if download_size == "GB":
        download = f"{int(float(download) / 1024):.2f}"

    await callback.message.delete()
    text = (
        "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
        f"üîº –ó–∞–≥—Ä—É–∂–µ–Ω–æ: `{upload} {upload_size}`\n"
        f"üîΩ –°–∫–∞—á–∞–Ω–æ: `{download} {download_size}`\n"
    )
    await callback.message.answer(text, parse_mode='Markdown')

@router.callback_query(F.data == "admin_network_stats")
async def network_stats(callback: CallbackQuery):
    stats = await get_global_stats()

    upload = f"{stats.get('upload', 0) / 1024 / 1024:.2f}"
    upload_size = 'MB' if int(float(upload)) < 1024 else 'GB'
    if upload_size == "GB":
        upload = f"{int(float(upload) / 1024):.2f}"

    download = f"{stats.get('download', 0) / 1024 / 1024:.2f}"
    download_size = 'MB' if int(float(download)) < 1024 else 'GB'
    if download_size == "GB":
        download = f"{int(float(download) / 1024):.2f}"
    
    await callback.answer()
    text = (
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏:**\n\n"
        f"üîº Upload: `{upload} {upload_size}` | üîΩ Download: `{download} {download_size}`"
    )
    await callback.message.edit_text(text, parse_mode='Markdown')

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    await show_menu(bot, callback.from_user.id, callback.message.message_id)

def setup_handlers(dp: Dispatcher):
    dp.include_router(router)
    logger.info("‚úÖ Handlers setup completed")

def safe_json_loads(data, default=None):
    if not data:
        return default
    try:
        return json.loads(data)
    except Exception:
        return default
